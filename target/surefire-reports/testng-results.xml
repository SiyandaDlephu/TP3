<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="4" failed="0" total="4" passed="0">
  <reporter-output>
  </reporter-output>
  <suite name="com.siyanda.atmWeb.test.repository.AtmCustomerRepositoryTest" duration-ms="3043" started-at="2014-05-10T19:49:42Z" finished-at="2014-05-10T19:49:45Z">
    <groups>
    </groups>
    <test name="Command line test" duration-ms="3043" started-at="2014-05-10T19:49:42Z" finished-at="2014-05-10T19:49:45Z">
      <class name="com.siyanda.atmWeb.test.repository.AtmCustomerRepositoryTest">
        <test-method status="FAIL" signature="setUpClass()[pri:0, instance:com.siyanda.atmWeb.test.repository.AtmCustomerRepositoryTest@1520293]" name="setUpClass" is-config="true" duration-ms="0" started-at="2014-05-10T12:49:42Z" finished-at="2014-05-10T12:49:42Z">
          <exception class="org.springframework.beans.factory.BeanCreationException">
            <message>
              <![CDATA[Error creating bean with name 'entityManagerFactory' defined in class com.siyanda.atmweb.app.conf.ConnectionConfig: Invocation of init method failed; nested exception is javax.persistence.PersistenceException: [PersistenceUnit: default] Unable to build Hibernate SessionFactory]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class com.siyanda.atmweb.app.conf.ConnectionConfig: Invocation of init method failed; nested exception is javax.persistence.PersistenceException: [PersistenceUnit: default] Unable to build Hibernate SessionFactory
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1553)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:750)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.context.annotation.AnnotationConfigApplicationContext.<init>(AnnotationConfigApplicationContext.java:84)
	at com.siyanda.atmWeb.test.repository.AtmCustomerRepositoryTest.setUpClass(AtmCustomerRepositoryTest.java:94)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:175)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:107)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
Caused by: javax.persistence.PersistenceException: [PersistenceUnit: default] Unable to build Hibernate SessionFactory
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.persistenceException(EntityManagerFactoryBuilderImpl.java:1225)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.access$600(EntityManagerFactoryBuilderImpl.java:119)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl$4.perform(EntityManagerFactoryBuilderImpl.java:853)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl$4.perform(EntityManagerFactoryBuilderImpl.java:843)
	at org.hibernate.boot.registry.classloading.internal.ClassLoaderServiceImpl.withTccl(ClassLoaderServiceImpl.java:397)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:842)
	at org.hibernate.jpa.HibernatePersistenceProvider.createContainerEntityManagerFactory(HibernatePersistenceProvider.java:152)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:336)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:318)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1612)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1549)
	... 44 more
Caused by: org.hibernate.MappingException: Repeated column in mapping for entity: com.siyanda.atmweb.domain.AtmCustomer column: id (should be mapped with insert="false" update="false")
	at org.hibernate.mapping.PersistentClass.checkColumnDuplication(PersistentClass.java:709)
	at org.hibernate.mapping.PersistentClass.checkPropertyColumnDuplication(PersistentClass.java:731)
	at org.hibernate.mapping.PersistentClass.checkPropertyColumnDuplication(PersistentClass.java:727)
	at org.hibernate.mapping.PersistentClass.checkColumnDuplication(PersistentClass.java:753)
	at org.hibernate.mapping.PersistentClass.validate(PersistentClass.java:506)
	at org.hibernate.mapping.RootClass.validate(RootClass.java:270)
	at org.hibernate.cfg.Configuration.validate(Configuration.java:1358)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1849)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl$4.perform(EntityManagerFactoryBuilderImpl.java:850)
	... 52 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.beans.factory.BeanCreationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method status="SKIP" signature="setUpMethod()[pri:0, instance:com.siyanda.atmWeb.test.repository.AtmCustomerRepositoryTest@1520293]" name="setUpMethod" is-config="true" duration-ms="0" started-at="2014-05-10T12:49:45Z" finished-at="2014-05-10T12:49:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpMethod -->
        <test-method status="SKIP" signature="createAtmCustomer()[pri:0, instance:com.siyanda.atmWeb.test.repository.AtmCustomerRepositoryTest@1520293]" name="createAtmCustomer" duration-ms="2" started-at="2014-05-10T12:49:45Z" finished-at="2014-05-10T12:49:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAtmCustomer -->
        <test-method status="SKIP" signature="tearDownMethod()[pri:0, instance:com.siyanda.atmWeb.test.repository.AtmCustomerRepositoryTest@1520293]" name="tearDownMethod" is-config="true" duration-ms="0" started-at="2014-05-10T12:49:45Z" finished-at="2014-05-10T12:49:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownMethod -->
        <test-method status="SKIP" signature="readAtmCustomer()[pri:0, instance:com.siyanda.atmWeb.test.repository.AtmCustomerRepositoryTest@1520293]" name="readAtmCustomer" duration-ms="0" started-at="2014-05-10T12:49:45Z" depends-on-methods="com.siyanda.atmWeb.test.repository.AtmCustomerRepositoryTest.createAtmCustomer" finished-at="2014-05-10T12:49:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- readAtmCustomer -->
        <test-method status="SKIP" signature="updateAtmCustomer()[pri:0, instance:com.siyanda.atmWeb.test.repository.AtmCustomerRepositoryTest@1520293]" name="updateAtmCustomer" duration-ms="0" started-at="2014-05-10T12:49:45Z" depends-on-methods="com.siyanda.atmWeb.test.repository.AtmCustomerRepositoryTest.readAtmCustomer" finished-at="2014-05-10T12:49:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateAtmCustomer -->
        <test-method status="SKIP" signature="deleteAtmCustomer()[pri:0, instance:com.siyanda.atmWeb.test.repository.AtmCustomerRepositoryTest@1520293]" name="deleteAtmCustomer" duration-ms="1" started-at="2014-05-10T12:49:45Z" depends-on-methods="com.siyanda.atmWeb.test.repository.AtmCustomerRepositoryTest.updateAtmCustomer" finished-at="2014-05-10T12:49:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteAtmCustomer -->
        <test-method status="SKIP" signature="tearDownClass()[pri:0, instance:com.siyanda.atmWeb.test.repository.AtmCustomerRepositoryTest@1520293]" name="tearDownClass" is-config="true" duration-ms="0" started-at="2014-05-10T12:49:45Z" finished-at="2014-05-10T12:49:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
      </class> <!-- com.siyanda.atmWeb.test.repository.AtmCustomerRepositoryTest -->
    </test> <!-- Command line test -->
  </suite> <!-- com.siyanda.atmWeb.test.repository.AtmCustomerRepositoryTest -->
</testng-results>
